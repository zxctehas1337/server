let nodemailer;
(async () => {
  nodemailer = (await import('nodemailer')).default;
})();

// Email configuration
const emailConfig = {
  host: process.env.SMTP_HOST || 'smtp.gmail.com',
  port: process.env.SMTP_PORT || 587,
  secure: false, // true for 465, false for other ports
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS
  }
};

// Create transporter
const transporter = nodemailer.createTransporter(emailConfig);

/**
 * Verify email configuration
 */
async function verifyEmailConfig() {
  try {
    await transporter.verify();
    return { success: true, message: 'Email configuration is valid' };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

/**
 * Send welcome email
 * @param {string} email - User's email address
 * @param {string} username - User's username
 */
async function sendWelcomeEmail(email, username) {
  const mailOptions = {
    from: process.env.SMTP_FROM || `"Kracken Messenger" <${process.env.SMTP_USER}>`,
    to: email,
    subject: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kracken Messenger! üöÄ',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #6366f1; margin: 0;">‚ö° Kracken Messenger</h1>
          <p style="color: #666; margin: 10px 0;">–ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä</p>
        </div>
        
        <div style="background: #f8f9fa; padding: 30px; border-radius: 10px; margin-bottom: 20px;">
          <h2 style="color: #333; margin-top: 0;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}! üéâ</h2>
          <p style="color: #555; line-height: 1.6;">
            –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ Kracken Messenger! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
          </p>
          
          <div style="background: #6366f1; color: white; padding: 20px; border-radius: 8px; text-align: center; margin: 30px 0;">
            <h3 style="margin: 0 0 10px 0; font-size: 18px;">üöÄ –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</h3>
            <p style="margin: 0; font-size: 16px;">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –æ–±—â–∏–º —á–∞—Ç–∞–º –∏ –Ω–∞–π–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π</p>
          </div>
          
          <div style="background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 20px 0;">
            <h4 style="margin: 0 0 10px 0; color: #2d5a2d;">‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</h4>
            <p style="margin: 0; color: #555; font-size: 14px;">
              Email –∞–¥—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ GitHub OAuth
            </p>
          </div>
        </div>
        
        <div style="text-align: center; color: #999; font-size: 12px;">
          <p>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</p>
          <p>¬© 2024 Kracken Messenger. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
        </div>
      </div>
    `
  };

  try {
    const result = await transporter.sendMail(mailOptions);
    console.log(`Welcome email sent to ${email}`);
    return { success: true, messageId: result.messageId };
  } catch (error) {
    console.error('Email sending error:', error);
    return { success: false, error: error.message };
  }
}

/**
 * Send verification email with code
 * @param {string} email - User's email address
 * @param {string} username - User's username
 * @param {string} code - Verification code
 */
async function sendVerificationEmail(email, username, code) {
  const mailOptions = {
    from: process.env.SMTP_FROM || `"Kracken Messenger" <${process.env.SMTP_USER}>`,
    to: email,
    subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email - Kracken Messenger',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #6366f1; margin: 0;"> Kracken Messenger</h1>
          <p style="color: #666; margin: 10px 0;">–ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä</p>
        </div>
        
        <div style="background: #f8f9fa; padding: 30px; border-radius: 10px; margin-bottom: 20px;">
          <h2 style="color: #333; margin-top: 0;">–ü—Ä–∏–≤–µ—Ç, ${username}!</h2>
          <p style="color: #555; line-height: 1.6;">
            –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ Kracken Messenger. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 
            –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à email –∞–¥—Ä–µ—Å.
          </p>
          
          <div style="background: #6366f1; color: white; padding: 20px; border-radius: 8px; text-align: center; margin: 30px 0;">
            <h3 style="margin: 0 0 10px 0; font-size: 18px;">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h3>
            <div style="font-size: 32px; font-weight: bold; letter-spacing: 8px; font-family: monospace;">
              ${code}
            </div>
          </div>
          
          <p style="color: #666; font-size: 14px; margin: 0;">
            –í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Ñ–æ—Ä–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ. –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.
          </p>
        </div>
        
        <div style="text-align: center; color: #999; font-size: 12px;">
          <p>–ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ Kracken Messenger, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
          <p>¬© 2024 Kracken Messenger. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
        </div>
      </div>
    `
  };

  try {
    const result = await transporter.sendMail(mailOptions);
    console.log(`Verification email sent to ${email}`);
    return { success: true, messageId: result.messageId };
  } catch (error) {
    console.error('Email sending error:', error);
    return { success: false, error: error.message };
  }
}

/**
 * Send password reset email
 * @param {string} email - User's email address
 * @param {string} username - User's username
 * @param {string} resetToken - Password reset token
 */
async function sendPasswordResetEmail(email, username, resetToken) {
  const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:3000'}/reset-password?token=${resetToken}`;
  
  const mailOptions = {
    from: process.env.SMTP_FROM || `"Kracken Messenger" <${process.env.SMTP_USER}>`,
    to: email,
    subject: '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - Kracken Messenger',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #6366f1; margin: 0;">‚ö° Kracken Messenger</h1>
          <p style="color: #666; margin: 10px 0;">–ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä</p>
        </div>
        
        <div style="background: #f8f9fa; padding: 30px; border-radius: 10px; margin-bottom: 20px;">
          <h2 style="color: #333; margin-top: 0;">–ü—Ä–∏–≤–µ—Ç, ${username}!</h2>
          <p style="color: #555; line-height: 1.6;">
            –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Kracken Messenger.
          </p>
          
          <div style="text-align: center; margin: 30px 0;">
            <a href="${resetUrl}" 
               style="background: #6366f1; color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; display: inline-block; font-weight: bold;">
              –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
            </a>
          </div>
          
          <p style="color: #666; font-size: 14px; margin: 0;">
            –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
            –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞.
          </p>
        </div>
        
        <div style="text-align: center; color: #999; font-size: 12px;">
          <p>¬© 2024 Kracken Messenger. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
        </div>
      </div>
    `
  };

  try {
    const result = await transporter.sendMail(mailOptions);
    console.log(`Password reset email sent to ${email}`);
    return { success: true, messageId: result.messageId };
  } catch (error) {
    console.error('Email sending error:', error);
    return { success: false, error: error.message };
  }
}

/**
 * Send notification email
 * @param {string} email - User's email address
 * @param {string} username - User's username
 * @param {string} message - Notification message
 */
async function sendNotificationEmail(email, username, message) {
  const mailOptions = {
    from: process.env.SMTP_FROM || `"Kracken Messenger" <${process.env.SMTP_USER}>`,
    to: email,
    subject: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - Kracken Messenger',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #6366f1; margin: 0;">‚ö° Kracken Messenger</h1>
          <p style="color: #666; margin: 10px 0;">–ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä</p>
        </div>
        
        <div style="background: #f8f9fa; padding: 30px; border-radius: 10px; margin-bottom: 20px;">
          <h2 style="color: #333; margin-top: 0;">–ü—Ä–∏–≤–µ—Ç, ${username}!</h2>
          <p style="color: #555; line-height: 1.6;">
            ${message}
          </p>
        </div>
        
        <div style="text-align: center; color: #999; font-size: 12px;">
          <p>¬© 2024 Kracken Messenger. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
        </div>
      </div>
    `
  };

  try {
    const result = await transporter.sendMail(mailOptions);
    console.log(`Notification email sent to ${email}`);
    return { success: true, messageId: result.messageId };
  } catch (error) {
    console.error('Email sending error:', error);
    return { success: false, error: error.message };
  }
}

/**
 * Generic email sending function
 * @param {Object} options - Email options
 */
async function sendEmail(options) {
  const mailOptions = {
    from: process.env.SMTP_FROM || `"Kracken Messenger" <${process.env.SMTP_USER}>`,
    to: options.to,
    subject: options.subject,
    html: options.html,
    text: options.text
  };

  try {
    const result = await transporter.sendMail(mailOptions);
    console.log(`Email sent to ${options.to}`);
    return { success: true, messageId: result.messageId };
  } catch (error) {
    console.error('Email sending error:', error);
    return { success: false, error: error.message };
  }
}

module.exports = {
  verifyEmailConfig,
  sendWelcomeEmail,
  sendVerificationEmail,
  sendPasswordResetEmail,
  sendNotificationEmail,
  sendEmail
};
